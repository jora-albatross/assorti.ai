---
import ButtonPrimary from "../components/ButtonPrimary.astro";
import ButtonSecondary from "../components/ButtonSecondary.astro";

interface Props {
  titleLine1?: string;
  titleLine2?: string;
  subtitle?: string;
  primaryLabel?: string;
  primaryHref?: string;
  secondaryLabel?: string;
  secondaryHref?: string;
}

const {
  titleLine1 = "Curated AI Recipes,",
  titleLine2 = "Ready to Ship",
  subtitle = "Playbooks that actually save time. No fluff — just repeatable workflows.",
  primaryLabel = "Explore Recipes",
  primaryHref = "/recipes",
  secondaryLabel = "How it works",
  secondaryHref = "/about",
} = Astro.props as Props;
---
/***
<section class="relative overflow-hidden pt-16 pb-14">
  <div class="max-w-6xl mx-auto px-5 grid items-center gap-10 md:grid-cols-2">
    <!-- ЛЕВАЯ КОЛОНКА: текст -->
    <div class="animate-hero-in">

      <!-- Чуть увеличенный line-height, чтобы не резало нижние выносные -->
       <h1 class="text-4xl md:text-5xl font-display font-bold leading-snug relative inline-block shine-text">
          <span class="block">Curated AI Recipes,</span>
          <span class="block bg-gradient-to-r from-gradientStart to-gradientEnd bg-clip-text text-transparent">
          Ready to Ship
          </span>
      </h1>


      <p class="mt-5 text-lg md:text-xl text-secondary/80">
        {subtitle}
      </p>

    <!-- НОРМАЛЬНЫЕ КНОКИ -->
      <div class="mt-6 flex gap-4">
          <a href="/recipes" 
             class="px-6 py-3 rounded-xl font-semibold text-white bg-accent shadow hover:shadow-lg transition">
             Explore Recipes
          </a>
          <a href="#how-it-works" 
             class="px-6 py-3 rounded-xl font-semibold border border-slate-300 text-secondary hover:bg-slate-50 transition">
              How it works
          </a>
      </div>


    </div>

    <!-- ПРАВАЯ КОЛОНКА: иллюстрация узлов/связей -->
    <div class="relative animate-hero-in-delay">
      <div
        class="pointer-events-none absolute -inset-8 rounded-[36px] blur-3xl opacity-60"
        style="background:
          radial-gradient(120px 120px at 20% 30%, rgba(91,108,255,0.20), transparent 60%),
          radial-gradient(160px 160px at 70% 60%, rgba(155,91,255,0.18), transparent 60%),
          radial-gradient(120px 120px at 40% 80%, rgba(255,107,107,0.16), transparent 60%);"
      ></div>

      <div class="relative rounded-2xl border border-slate-200 bg-white/70 backdrop-blur p-4 md:p-6 shadow-sm">
        <svg viewBox="0 0 560 420" class="w-full h-auto" role="img" aria-label="Abstract AI node graph">
          <defs>
            <linearGradient id="strokeGrad" x1="0" y1="0" x2="1" y2="1">
              <stop offset="0%" stop-color="#5B6CFF" />
              <stop offset="100%" stop-color="#9B5BFF" />
            </linearGradient>
            <linearGradient id="nodeGrad" x1="0" y1="0" x2="1" y2="1">
              <stop offset="0%" stop-color="#5B6CFF" />
              <stop offset="100%" stop-color="#9B5BFF" />
            </linearGradient>
          </defs>

          <!-- Рёбра -->
          <g stroke="url(#strokeGrad)" stroke-opacity="0.45" stroke-width="2" class="motion-safe:animate-graph-pulse">
            <line x1="70" y1="90" x2="210" y2="120" />
            <line x1="210" y1="120" x2="320" y2="80" />
            <line x1="320" y1="80" x2="450" y2="140" />
            <line x1="210" y1="120" x2="260" y2="210" />
            <line x1="260" y1="210" x2="120" y2="230" />
            <line x1="260" y1="210" x2="400" y2="240" />
            <line x1="400" y1="240" x2="480" y2="320" />
            <line x1="120" y1="230" x2="80"  y2="320" />
            <line x1="320" y1="80"  x2="400" y2="40"  />
          </g>

          <!-- Узлы -->
          <g>
            <circle cx="210" cy="120" r="10" fill="url(#nodeGrad)" class="motion-safe:animate-float-slow" />
            <circle cx="260" cy="210" r="11" fill="url(#nodeGrad)" class="motion-safe:animate-float" />
            <circle cx="400" cy="240" r="10" fill="url(#nodeGrad)" class="motion-safe:animate-float" />
            <circle cx="320" cy="80"  r="9"  fill="url(#nodeGrad)" class="motion-safe:animate-float" />
            <circle cx="70"  cy="90"  r="6"  fill="#5B6CFF" class="motion-safe:animate-float-fast" />
            <circle cx="450" cy="140" r="6"  fill="#9B5BFF" class="motion-safe:animate-float-fast" />
            <circle cx="120" cy="230" r="6"  fill="#5B6CFF" class="motion-safe:animate-float-fast" />
            <circle cx="480" cy="320" r="6"  fill="#9B5BFF" class="motion-safe:animate-float-fast" />
            <circle cx="80"  cy="320" r="6"  fill="#5B6CFF" class="motion-safe:animate-float-fast" />
            <circle cx="400" cy="40"  r="5"  fill="#9B5BFF" class="motion-safe:animate-float-fast" />
          </g>

          <g opacity="0.12" class="motion-safe:animate-breathe">
            <circle cx="260" cy="210" r="46" fill="#FF6B6B" />
            <circle cx="210" cy="120" r="36" fill="#5B6CFF" />
          </g>
        </svg>

        <div class="mt-3 text-xs text-secondary/60">
          Auto-curated connections between tools, prompts and outputs.
        </div>
      </div>
    </div>
  </div>

  <div class="absolute inset-x-0 -bottom-px h-px bg-gradient-to-r from-transparent via-slate-200 to-transparent"></div>
</section>

<style>
  /* Появление блоков */
  @keyframes heroIn {
    from { opacity: 0; transform: translateY(10px); }
    to   { opacity: 1; transform: translateY(0); }
  }
  .animate-hero-in       { animation: heroIn .7s ease-out both; }
  .animate-hero-in-delay { animation: heroIn .7s ease-out .12s both; }

  /* Hover-пульс можно оставить на кнопке через box-shadow, но сейчас используем стандартный hover:opacity-90 */

  /* Градиентный текст + shine */
  .gradient-text{
    background-image: linear-gradient(90deg, var(--c1,#5B6CFF), var(--c2,#9B5BFF));
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
    position: relative;
  }
  .shine-trigger{
    --shine-color: rgba(255,255,255,.35);
    --shine-rot: 20deg;
    --shine-speed: 1.2s;
  }
  .shine-trigger::after{
    content:"";
    position:absolute;
    inset:0;
    background:
      linear-gradient(var(--shine-rot),
        transparent 0%,
        transparent 45%,
        var(--shine-color) 50%,
        transparent 55%,
        transparent 100%);
    transform: translateX(-140%);
    opacity: 0;
    pointer-events: none;
  }
  .shine-trigger:hover::after,
  .shine-trigger:focus-visible::after{
    animation: shine var(--shine-speed) ease-out forwards;
    opacity: 1;
  }
  @keyframes shine{
    from { transform: translateX(-140%); }
    to   { transform: translateX(140%); }
  }

  /* Плавающие узлы + дыхание линий */
  @keyframes float { 0%{transform:translateY(0)} 50%{transform:translateY(-6px)} 100%{transform:translateY(0)} }
  @keyframes floatSlow { 0%{transform:translateY(0)} 50%{transform:translateY(-4px)} 100%{transform:translateY(0)} }
  @keyframes floatFast { 0%{transform:translateY(0)} 50%{transform:translateY(-8px)} 100%{transform:translateY(0)} }
  @keyframes breathe { 0%{transform:scale(1);opacity:.10} 50%{transform:scale(1.06);opacity:.18} 100%{transform:scale(1);opacity:.10} }
  @keyframes graphPulse { 0%{stroke-opacity:.35} 50%{stroke-opacity:.55} 100%{stroke-opacity:.35} }

  .animate-float { animation: float 6s ease-in-out infinite; }
  .animate-float-slow { animation: floatSlow 7.5s ease-in-out infinite; }
  .animate-float-fast { animation: floatFast 5s ease-in-out infinite; }
  .animate-breathe { animation: breathe 7s ease-in-out infinite; }
  .animate-graph-pulse { animation: graphPulse 4.5s ease-in-out infinite; }

  /* Уважение к reduced-motion */
  @media (prefers-reduced-motion: reduce) {
    .animate-hero-in, .animate-hero-in-delay,
    .animate-float, .animate-float-slow, .animate-float-fast,
    .animate-breathe, .animate-graph-pulse,
    .shine-trigger::after {
      animation: none !important;
      transform: none !important;
    }
  }
</style>
***/

<section class="relative overflow-hidden pt-16 pb-14">
  <div class="max-w-6xl mx-auto px-5 grid gap-10 md:grid-cols-2 items-center">
    
    <!-- ЛЕВАЯ КОЛОНКА -->
    <div class="col-span-1 min-w-0 relative z-10 appear">
      <h1 class="font-display text-4xl md:text-6xl leading-[1.12] md:leading-[1.08] tracking-tight max-w-[22ch]">
        Curated AI Recipes, <br/>
        <span class="bg-gradient-to-r from-gradientStart to-gradientEnd bg-clip-text text-transparent shine-trigger">
          Ready to Ship
        </span>
      </h1>
      <p class="mt-6 text-lg text-slate-600 max-w-xl">
        Playbooks that actually save time. No fluff — just repeatable workflows.
      </p>
      <div class="mt-6 flex gap-4">
        <a href="/recipes" class="px-5 py-3 rounded-lg bg-accent text-white font-semibold hover:shadow-lg transition">
          Explore Recipes
        </a>
        <a href="/about" class="px-5 py-3 rounded-lg border border-slate-200 hover:bg-slate-50 transition">
          How it works
        </a>
      </div>
    </div>

    <!-- ПРАВАЯ КОЛОНКА -->
    <div class="col-span-1 min-w-0 relative z-0 appear-delay">
      <!-- твоя иллюстрация -->
      <svg><!-- SVG вставь сюда --></svg>
    </div>
  </div>
</section>

<style>
@keyframes heroIn {
  from { opacity: 0; transform: translateY(10px); }
  to   { opacity: 1; transform: translateY(0); }
}
.appear { animation: heroIn .6s ease-out both; }
.appear-delay { animation: heroIn .6s ease-out .12s both; }

/* shine на заголовке */
.shine-trigger {
  position: relative;
  display: inline-block;
}
.shine-trigger::after {
  content: "";
  position: absolute;
  inset: 0;
  background: linear-gradient(120deg, transparent 0%, rgba(255,255,255,0.6) 50%, transparent 100%);
  transform: translateX(-100%);
  animation: shine 3s infinite;
}
@keyframes shine {
  0% { transform: translateX(-100%); }
  50% { transform: translateX(100%); }
  100% { transform: translateX(100%); }
}
</style>
